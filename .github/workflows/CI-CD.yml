name: CI-CD

on:
  push:
    branches:
      - main

jobs:
  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          
      - name: Update submodules explicitly
        run: git submodule update --init --recursive
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-tidy \
            clang-format \
            parallel \
            python3-pip \
            cmake \
            build-essential \
            wget \
            tar
          
      - name: Install Conan via pip
        run: |
          python3 -m pip install --user conan==2.15.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Set up Conan profile
        working-directory: Frontend
        run: |
          mkdir -p $HOME/.conan2/profiles
          conan profile detect --name=default --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=23/' $HOME/.conan2/profiles/default
          cat $HOME/.conan2/profiles/default
      
      - name: Install tgbotstater dependency
        working-directory: Frontend
        run: |
          mkdir -p /tmp/deps
          cd /tmp/deps
          wget https://github.com/Makcal/TgBotStater/archive/refs/tags/v0.3.4.tar.gz
          tar -xvf v0.3.4.tar.gz
          cd TgBotStater-0.3.4
          conan create . --build=missing
      
      - name: Install project dependencies
        working-directory: Frontend
        run: |
          conan install . --build=missing
      
      - name: Configure CMake
        working-directory: Frontend
        run: |
          mkdir -p build/Release
          cmake --preset=conan-release
      
      - name: Run clang-format checks
        working-directory: Frontend
        run: |
          find src include -type f \( -name '*.hpp' -or -name '*.cpp' \) \
            -exec clang-format --dry-run --Werror {} \;
      
      - name: Run parallel clang-tidy
        working-directory: Frontend
        run: |
          find src include \( -name '*.hpp' -or -name '*.cpp' \) -print0 | \
          parallel -0 -j$(nproc) --halt now,fail=1 \
          'clang-tidy -p build/Release --warnings-as-errors="*" {}'

        
  build-backend:
    runs-on: ubuntu-latest
    needs: lint-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
    
      - name: Update submodules explicitly
        run: git submodule update --init --recursive
    
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./Backend
          push: true
          tags: j0cos/cookcookhnya-backend:${{ github.sha }}
        
  build-frontend:
    runs-on: ubuntu-latest
    needs: lint-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend
          push: true
          tags: j0cos/cookcookhnya-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/rash/app
            echo "BACKEND_TAG=${{ github.sha }}
            FRONTEND_TAG=${{ github.sha }}
            BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            API_URL=${{ secrets.API_URL }}" > /home/rash/app/.env
            docker compose down && docker compose -f /home/rash/app/compose.yaml up -d
