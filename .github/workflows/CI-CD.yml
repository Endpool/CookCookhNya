name: CI-CD

on:
  push:
    branches: [main, dev]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.value }}
    steps:
      - name: Extract branch name
        id: branch
        run: echo "value=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    if: github.repository_owner == 'Endpool'
    strategy:
      matrix:
        component: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with adaptive submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Configure submodule branches
        run: |
          # Set submodule branches to match root repo branch
          git config -f .gitmodules submodule.Backend.branch ${{ needs.prepare.outputs.branch_name }}
          git config -f .gitmodules submodule.Frontend.branch ${{ needs.prepare.outputs.branch_name }}
          git submodule sync
          git submodule update --remote --recursive

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Buildx
        if: matrix.component == 'frontend'
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component | capitalize }}
          push: true
          tags: j0cos/cookcookhny-${{ matrix.component }}:${{ github.sha }}
          cache-from: ${{ matrix.component == 'frontend' && 'type=gha' || '' }}
          cache-to: ${{ matrix.component == 'frontend' && 'type=gha,mode=max' || '' }}

  deploy:
    needs: [prepare, build-and-push]
    if: github.repository_owner == 'Endpool'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to target environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            ENV_DIR="/home/rash/${{ github.ref == 'refs/heads/main' && 'app' || 'app-stage' }}"
            cd $ENV_DIR
            
            echo "BACKEND_TAG=${{ github.sha }}
            FRONTEND_TAG=${{ github.sha }}
            BOT_TOKEN=${{ github.ref == 'refs/heads/main' && secrets.BOT_TOKEN || secrets.BOT_TOKEN_STAGE }}
            API_URL=http://backend:8080
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            INVITATIONS_SECRET_KEY=${{ secrets.INVITATIONS_SECRET_KEY }}" > .env
            
            docker compose down
            docker compose up -d